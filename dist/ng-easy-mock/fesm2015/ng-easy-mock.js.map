{"version":3,"file":"ng-easy-mock.js","sources":["ng://ng-easy-mock/lib/interfaces.ts","ng://ng-easy-mock/lib/ng-easy-mock.service.ts","ng://ng-easy-mock/lib/ng-easy-mock.interceptor.ts","ng://ng-easy-mock/lib/ng-easy-mock.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\r\nimport { HttpResponse, HttpRequest } from '@angular/common/http';\r\n\r\n/**\r\n * Ê®°ÊãüHTTPÈîôËØØÁä∂ÊÄÅÁ±ª\r\n */\r\nexport class MockStatusError {\r\n    constructor(status: number = 500) {\r\n        return new HttpResponse({ status, statusText: 'HTTPÂºÇÂ∏∏' });\r\n    }\r\n}\r\n\r\n/**\r\n * MockËØ∑Ê±ÇÂØπË±° \r\n */\r\nexport interface MockRequest {\r\n    params: { [key: string]: string },\r\n    queryString: { [key: string]: string },\r\n    headers: { [key: string]: string },\r\n    body: any,\r\n    original: HttpRequest<any>\r\n}\r\n\r\n/**\r\n * mock ÈÖçÁΩÆ\r\n */\r\nexport interface MockConfig {\r\n    delay?: number,\r\n    log?: boolean,\r\n    data: { [key: string]: { [key: string]: any } }\r\n}\r\n\r\n/**\r\n * ËßÑÂàôÂØπË±°(ÂÜÖÈÉ®‰ΩøÁî®)\r\n */\r\nexport interface rule {\r\n    method: string,\r\n    url: string,\r\n    data: any\r\n}\r\n\r\n/**\r\n * ÈÖçÁΩÆÊ≥®ÂÖ•‰ª§Áâå(ÂÜÖÈÉ®‰ΩøÁî®)\r\n */\r\nexport const Config = new InjectionToken<MockConfig>('config');\r\n\r\n","import { Injectable, Optional, Inject } from '@angular/core';\r\n\r\nimport { MockConfig, Config, rule } from './interfaces';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgEasyMockService {\r\n\r\n  ruleList: rule[] = [];\r\n\r\n  constructor(@Optional() @Inject(Config) public config: MockConfig) {\r\n    this.config = Object.assign({ delay: 300, log: true }, this.config);\r\n\r\n    Object.values(this.config.data || {}).forEach(obj => {\r\n      Object.entries(obj).forEach(([key, value]) => {\r\n        if (!key.includes(' ')) {\r\n          key = `GET ${key}`;\r\n        }\r\n        let ruleUrls = key.split(' ');\r\n        this.ruleList.push({\r\n          method: ruleUrls[0].toLocaleUpperCase(),\r\n          url: ruleUrls[1],\r\n          data: value\r\n        });\r\n      });\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * Ëé∑ÂèñËßÑÂàô\r\n   * @param method \r\n   * @param url \r\n   */\r\n  getRule(method: string, url: string) {\r\n    method = method.toLocaleUpperCase();\r\n    url = this.getPath(url);\r\n\r\n    return this.ruleList.filter(item => item.method == method).find(item => {\r\n      let urlSegmentList = this.getUrlSegment(url);\r\n      let ruleSegmentList = this.getUrlSegment(item.url);\r\n      if (urlSegmentList.length == ruleSegmentList.length) {\r\n        return ruleSegmentList.every((ruleUrlSegment, index) => {\r\n          if(ruleUrlSegment.startsWith(':')) return true;\r\n          return ruleUrlSegment == urlSegmentList[index];\r\n        });\r\n      } else {\r\n        return false;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * ÁßªÈô§Êü•ËØ¢Â≠óÁ¨¶‰∏≤\r\n   * @param url \r\n   */\r\n  getPath(url: string) {\r\n    return url.slice(0, url.includes('?') ? url.indexOf('?') : undefined);\r\n  }\r\n\r\n  /**\r\n   * Ëé∑ÂèñURLÁâáÊÆµ\r\n   * @param url \r\n   */\r\n  getUrlSegment(url: string) {\r\n    return url.split('/');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor, HttpResponse } from '@angular/common/http';\r\n\r\nimport { Observable, of } from 'rxjs';\r\nimport { delay } from 'rxjs/operators';\r\n\r\nimport { NgEasyMockService } from './ng-easy-mock.service';\r\nimport { rule, MockRequest } from './interfaces';\r\n\r\n@Injectable()\r\nexport class NgEasyMockInterceptor implements HttpInterceptor {\r\n\r\n  constructor(public mockService: NgEasyMockService) { }\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    let rule = this.mockService.getRule(request.method, request.urlWithParams);\r\n    if (!rule) return next.handle(request);\r\n\r\n    let httpResponse = new HttpResponse({\r\n      body: (typeof rule.data == 'function') ? rule.data(this.getParams(request, rule)) : this.clone(rule.data)\r\n    });\r\n\r\n    if (this.mockService.config.log) {\r\n      console.log(`%cüëΩ [${request.method}] -> [${this.mockService.getPath(request.urlWithParams)}] -> [Request]`, 'background:#000;color:#bada55', request);\r\n      console.log(`%cüëΩ [${request.method}] -> [${this.mockService.getPath(request.urlWithParams)}] -> [Response]`, 'background:#000;color:#bada55', httpResponse);\r\n    }\r\n\r\n    return of(httpResponse).pipe(delay(this.mockService.config.delay));\r\n  }\r\n\r\n  /**\r\n   * Ëé∑ÂèñÂèÇÊï∞\r\n   * @param request \r\n   * @param rule \r\n   */\r\n  getParams(request: HttpRequest<any>, rule: rule): MockRequest {\r\n    let mockRequest: MockRequest = {\r\n      params: {},\r\n      queryString: {},\r\n      headers: {},\r\n      body: request.body,\r\n      original: request\r\n    };\r\n\r\n    let urlSegmentList = this.mockService.getUrlSegment(this.mockService.getPath(request.urlWithParams));\r\n    let ruleSegmentList = this.mockService.getUrlSegment(rule.url);\r\n    ruleSegmentList.forEach((ruleUrlSegment, index) => {\r\n      if (ruleUrlSegment.startsWith(':')) {\r\n        mockRequest.params[ruleUrlSegment.slice(1)] = urlSegmentList[index];\r\n      }\r\n    });\r\n\r\n    let queryString = request.urlWithParams.slice(request.urlWithParams.includes('?') ? request.urlWithParams.indexOf('?') + 1 : 0);\r\n    if (queryString) {\r\n      queryString.split('&').forEach(item => {\r\n        let [key, value] = item.split('=');\r\n        mockRequest.queryString[key] = value;\r\n      });\r\n    }\r\n\r\n    request.headers.keys().forEach(key => {\r\n      mockRequest.headers[key] = request.headers.get(key);\r\n    });\r\n\r\n    return mockRequest;\r\n  }\r\n\r\n  /**\r\n   * ÂÖãÈöÜÂØπË±°\r\n   * @param obj \r\n   */\r\n  clone(obj = null) {\r\n    return JSON.parse(JSON.stringify(obj));\r\n  }\r\n\r\n}","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\n\r\nimport { MockConfig, Config } from './interfaces';\r\nimport { NgEasyMockInterceptor } from './ng-easy-mock.interceptor';\r\n\r\n@NgModule({\r\n  providers: [{ provide: HTTP_INTERCEPTORS, useClass: NgEasyMockInterceptor, multi: true }],\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule\r\n  ]\r\n})\r\nexport class NgEasyMockModule {\r\n  static forRoot(config: MockConfig): ModuleWithProviders<NgEasyMockModule> {\r\n    return {\r\n      ngModule: NgEasyMockModule,\r\n      providers: [{ provide: Config, useValue: config }]\r\n    };\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}